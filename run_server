var https   = require("https"),
    http    = require("http"),
    fs      = require("fs"),
    sys     = require("sys"),
    url     = require("url"),
    path    = require("path"),
    conf    = require('./conf'),
    //ssl key
    options = {
      key : conf.srckey.key,
      cert : conf.srckey.cert
    },
    rewrite = conf.rewrite;

var readConfig = function(path){
  var json = require(path);
  var rules = {};
  for(var i in json){
      if(json[i]['files']){
          var obj = json[i]['files']
          for(var j in obj){
              rules[j] = obj[j];
          }
      }
  }
  return rules;
};

//format Config
var packRule = {
  js : readConfig(conf.package_js),
  css : readConfig(conf.package_css)
};

//get local file content
var getFile = function(fileName, fileRoot, suffix){
  var content = '';
  var rules = packRule[suffix] || {};
  if(fileName in rules){
      var filelist = rules[fileName];
      for(var i = 0; i < filelist.length; i++){
          if(filelist[i] in rules){
              content += getFile(filelist[i], fileRoot, suffix);
          }else{
              console.log('==>' + fileRoot + filelist[i] + '\n');
              content += fs.readFileSync(fileRoot + filelist[i],'utf8');
          }
      }
  }else{
      if(fs.existsSync(fileRoot + fileName)){
          content += fs.readFileSync(fileRoot + fileName,'utf8');    
      }else{
          content = fileRoot + fileName + " No Founded!\n";
      }
  }
  return content;
};

var getHTTPRequest = function(requestUrl, callback){
  var urlData = url.parse(requestUrl);
  var request = http.createClient(80, urlData.host).
  request('GET', urlData.pathname, {
    "host": urlData.host
  });

  request.on('response',function(response){
    var type = response.headers["content-type"],
        body = "";
    response.setEncoding('binary');
    response.on('end', function() {
      var data = {
          type: type,
          body: body
      };
      callback(data);
    });
    response.on('data', function(chunk) {
       if (response.statusCode == 200) body += chunk;
    });
  });

  request.end();
};

//server listening
console.log('Server running at https://127.0.0.1:443/');
https.createServer(options, function (req, res) {
    var pathname = url.parse(req.url).pathname;

    console.log( "You requested " + pathname + "\n" );

    //url filter
    pathname = pathname.replace(/\/res\/.*\/?scripts\/(.*)/, "/res/scripts/$1");
    pathname = pathname.replace(/\/res\/.*\/?css\/micloudfe\/?(.*)$/,"/res/css/$1");

    var mines = {
      "css": "text/css;charset=UTF-8",
      "gif": "image/gif",
      "html": "text/html;charset=UTF-8",
      "ico": "image/x-icon",
      "jpeg": "image/jpeg",
      "jpg": "image/jpeg",
      "js": "text/javascript;charset=UTF-8",
      "png": "image/png",
    };

    var fileName = "";
    var fileRoot = "";
    var fileContent = "";

    for(var rule in rewrite){
        if(pathname.match(new RegExp(rule))){
            fileName = pathname.replace(/.*\/(.*\.\w*)/,'$1');
            fileRoot = pathname.replace(new RegExp(rule), rewrite[rule]).replace(/(.*\/).*/, '$1');
            break;
        }
    }

    console.log( "You redirectTo " + fileRoot + "\n" );
    var ext = path.extname(pathname);
    ext = ext ? ext.slice(1) : 'unknown';

    if(fileRoot.indexOf('http') != 0){
      res.writeHead(200, {'Content-Type': (mines[ext] || "text/plain")});
      res.write(getFile(fileName, fileRoot, ext));
      res.end('');
    }else{
      getHTTPRequest(fileRoot + fileName, function(data){
        res.writeHead(200, {'Content-Type': (mines[ext] || "text/plain")});
        res.write(data.body, "binary");
        res.end();
      });
    }

}).listen(443);